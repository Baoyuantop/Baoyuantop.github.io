<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://baoyuantop.github.io</id>
    <title>Baoyuan&apos;s Blog</title>
    <updated>2021-07-08T02:26:18.106Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://baoyuantop.github.io"/>
    <link rel="self" href="https://baoyuantop.github.io/atom.xml"/>
    <logo>https://baoyuantop.github.io/images/avatar.png</logo>
    <icon>https://baoyuantop.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Baoyuan&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[React Hooks]]></title>
        <id>https://baoyuantop.github.io/post/react-hooks/</id>
        <link href="https://baoyuantop.github.io/post/react-hooks/">
        </link>
        <updated>2020-03-30T13:30:15.000Z</updated>
        <content type="html"><![CDATA[<p><code>React Hooks</code> 是一种特殊的函数，它可以让你拿到 <code>React</code> 中的很多特性：<code>state</code>、<code>生命周期</code> 等等。<br>
在一些 <code>React</code> 的函数组件中，比如：</p>
<pre><code class="language-javascript">function Example (props) {
    return &lt;div /&gt;;
}
</code></pre>
<p>我们可能更习惯叫它 “无状态组件”，因为它没有内部状态（state），也没有生命周期函数。一般如果我们要做一个轻量的组件，只用来渲染数据，不包含自身的 <code>state</code> ，那么我们可以选择函数式组件，它可以给我们带来更好的性能。</p>
<p>一旦我们需要维护组件自身的 <code>state</code> 或是生命周期方法，函数式组件就不能很好的胜任了。我们会选择 <code>class</code> 组件。</p>
<p>我们还是拿最简单的计数器🌰看下：</p>
<p>我们先写一个 <code>class</code> 组件：</p>
<pre><code class="language-javascript">class Number extends React.component {
    constructor(props) {
        super(props);
        this.state = {
            count: 0,
        }
        this.handleClick = this.handleClick.bind(this)
    }

    handleClick (e) {
        this.setState({
            count: this.state.count + 1
        })
    }

    render () {
        return (
            &lt;div&gt;
                &lt;p&gt;{this.state.count}&lt;/p&gt;
                &lt;button onClick={this.handleClick}&gt;
                    Click me ~
                &lt;/button&gt;
            &lt;/div&gt;
        )
    }
}
</code></pre>
<p>很简单，当我们点一下按钮数字就会加一。</p>
<p>有了 React Hooks 的帮助，我们也可以在函数组件中实现这样的功能。React Hooks 中内置了一个 <code>useState</code> Hook，React 允许我们使用它在函数式组件中使用 <code>state</code>：</p>
<pre><code class="language-javascript">import React, { useState } from 'react';

function Number () {
    const [count, setCount] = useState(0)

    return (
        &lt;div&gt;
            &lt;p&gt;{count}&lt;/p&gt;
            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;
                Click me ~
            &lt;/button&gt;
        &lt;/div&gt;
    )
}
</code></pre>
<p>我们用这样一个函数式组件完成了相同的功能。</p>
<p>我们先从 <code>react</code> 中引入了 <code>useState</code> 这个 Hook，然后使用它初始化这个组件的 <code>state</code> ，<code>useState</code> 接受一个初始值参数，我们使用它初始化 <code>state</code>，然后使用结构赋值拿到 <code>count</code> 和 <code>setCount</code>，setCount 可以改变 count。当我们想要读取的时候，直接用 <code>count</code> 即可。</p>
<p>如果我们还需要其他 state 的话，直接定义即可：</p>
<pre><code class="language-javascript">    const [food, setFood] = useState('🍔')
    const [drink, setDrink] = useState('🍺')
    // ......
</code></pre>
<p>所以在之前如果我们编写函数式组件的时候需要使用 <code>state</code>，那么我们会将它转换为 <code>class</code> 组件，现在我们可以在现有的函数式组件中使用 <code>Hook</code> 完成。</p>
<p>React 内置了很多种 Hook 提供不同的功能，我们可以按需选用。除此之外，React 还支持自定义 Hook 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端入坑指南]]></title>
        <id>https://baoyuantop.github.io/post/qian-duan-ru-keng-zhi-nan/</id>
        <link href="https://baoyuantop.github.io/post/qian-duan-ru-keng-zhi-nan/">
        </link>
        <updated>2020-01-01T07:39:00.000Z</updated>
        <summary type="html"><![CDATA[<p>一点建议</p>
]]></summary>
        <content type="html"><![CDATA[<p>一点建议</p>
<!-- more -->
<h3 id="前端入门指南">前端入门指南</h3>
<h4 id="为什么选择前端">为什么选择前端</h4>
<p>做一件事之前最好问问自己为什么要做，然后再去思考该怎么做。如果只是看到别人做了，并且有很不错的收入，然后自己就决定做了，很可能中途放弃浪费掉很多时间。起码问自己一个问题：我是否真的热爱这个领域，并且很乐意在这个领域持续不断的一直学习付出？当你模糊不定我想你可以再想想自己适合什么，如果你接触后发现这就是我喜欢的东西，那么我想你可以开始了。</p>
<p>作为自学两年的初级前端，希望对那些想入门前端开发的人分享一些观点。先谈谈我那会为什么选择入门前端，这个可能大多数人都一样：</p>
<ul>
<li>
<p>不喜欢黑乎乎的命令框程序，喜欢漂亮的用户界面</p>
</li>
<li>
<p>不喜欢整天与数据库交流，喜欢向用户展示内容和处理用户的操作</p>
</li>
<li>
<p>代码写一点就能看见视图效果出来一点，这是很有成就感的</p>
</li>
</ul>
<p>要是你有很强的算法逻辑，喜欢处理海量的用户请求和数据，你可以考虑一下后端开发，当然做一名全栈开发是最好的。</p>
<p>这里有一个很大的误区：大多数人觉得前端简单，填填<code>Html</code>,稍微加点<code>CSS</code>,然后用<code>JavaScript</code>处理一下点击事件以及其他的逻辑，一个网页就成了。然后就会给人一个错觉：我简单地看看文档大概用一周的时间就能动手写网页了，给人一种前端门槛很低的感觉，还不用去考虑后端那些复杂的算法逻辑。</p>
<p>确实，对于一个新手写一些网页确实不太需要算法逻辑，但是这些想法很容易给人误导，懂得这些你只是一个<code>切图工</code>，并不是一个很好的开发者。尤其是这几年前端领域飞速的发展，新东西层出不穷。仅仅会这些早已不能满足需求了。</p>
<h4 id="前端发展及入门建议">前端发展及入门建议</h4>
<p>这几年这一领域的发展还算蛮大的，出现了很多新的工具，前端开发的地位越来越被重视，随着技术的更新前端的产品体验越来越好。</p>
<p>但是作为前端的三大基石：<code>Html</code>、<code>CSS</code>和<code>JavaScript</code>基础的内容没怎么变过，不过是在其基础上增加很多新的特性和方法。后来随着<code>Webpack</code>等一些工具的出现，前端的工作方式发生了变化，以及一些新的框架比如<code>Vue.js</code>、<code>React</code>的出现，使得前端体系越发的庞大。不过只要分清楚哪些是重点就可以。</p>
<p>纵观计算机发展史，二三十年间技术更替了一波又一波，不断有新的技术产生，老的淘汰。前端领域也更替了好几代，所以希望明白一个事实，不要去争论什么语言、什么框架好，万一哪天出来一个更好的把它替代了呢？所以不要局限住自己的视野，要看到那些基础的东西是不会变的，那些 js 基础、网络协议以及一些编程思想，也就是数据结构与算法，吃透这些底层的东西无论上层工具怎样交替更换，自己总能得心应手。不要让自己完全依赖框架，要是没有框架该怎么办呢？</p>
<p>打个比方，《蜘蛛侠：英雄归来》里面托尼对他说的：</p>
<p><a href="https://i.loli.net/2019/05/20/5ce25ec6f12b563569.jpg"><img src="https://i.loli.net/2019/05/20/5ce25ec6f12b563569.jpg" alt="" loading="lazy"></a><br>
<a href="https://i.loli.net/2019/05/20/5ce25ec6f12fc47996.jpg"><img src="https://i.loli.net/2019/05/20/5ce25ec6f12fc47996.jpg" alt="" loading="lazy"></a><br>
<a href="https://i.loli.net/2019/05/20/5ce25ec74623242554.jpg"><img src="https://i.loli.net/2019/05/20/5ce25ec74623242554.jpg" alt="" loading="lazy"></a><br>
<a href="https://i.loli.net/2019/05/20/5ce25ec8cf68814611.jpg"><img src="https://i.loli.net/2019/05/20/5ce25ec8cf68814611.jpg" alt="" loading="lazy"></a><br>
<a href="https://i.loli.net/2019/05/20/5ce25ec8cf68986690.jpg"><img src="https://i.loli.net/2019/05/20/5ce25ec8cf68986690.jpg" alt="" loading="lazy"></a></p>
<h4 id="学习路线及资源">学习路线及资源</h4>
<p>这些都是我觉得比较好的东西，推荐一下：搜索引擎直接查找即可，也可关注我的微信公众号<code>前端123</code>获取。</p>
<ol>
<li>
<p>首先就是<code>HTML</code>与<code>CSS</code>:<code>HTML</code>负责网页的骨架，而<code>CSS</code>则主要负责你美化你的的网页的样式。这些基础的话入门的时候过一下文档就可以了，这里推荐<code>MDN Web docs</code>。还有一个很有趣的教程，如果你不喜欢单看文字教程的话，可以试试<code>Freecodecamp</code>，一个学习编程的网站，闯关游戏感觉的学习过程，由最简单渐进深入的内容，试一下你会喜欢的。</p>
</li>
<li>
<p>接着就是<code>JavaScript</code>的部分，这也是前端开发水平的分水岭，切图仔与工程师差距就在这。很多人往往忽略这一部分，往往拿着一些开发框架的特性和功能就开始直接使用了，觉得可以应付一般的需求，但是那些框架的原理实现对他完全就是黑盒，很容易造成错误和创造低效的代码。学习这部分的话首先推荐<code>廖雪峰的 JavaScript 教程</code>，内容很完整，每个部分还有单独的测试，以及后面的 js 一条龙教程。还有一个就是广受业内赞誉，被称为<code>红宝书</code>的<code>JavaScript 高级程序设计</code>。书很厚，但是完全值得啃下去。</p>
</li>
<li>
<p>当你觉得完全掌握了上面的内容了，对<code>JavaScript</code>的基础了如指掌，是时候上手一门框架来增加你的开发效率了。无论<code>Vue</code>还是<code>React</code>，你都需要仔细阅读官方给的文档，这是最有效率的方式，选择你喜欢的框架风格深入看完文档就行了。</p>
</li>
</ol>
<h4 id="学习策略与态度">学习策略与态度</h4>
<p>好的学习方法是可以让你利用有限的时间掌握更多的内容。首先不得不提的是<code>解决问题的能力</code>是一个人很可贵的品质。</p>
<p>编程的路上肯定会遇到不可控的各种问题，冷静分析，查阅错误信息，找出解决方法。或是尝试了各种方法，但是依旧无法解决，阻挡了你前进的步伐。这个时候你就要找一个你信任的水平高于你的人，解释你遇到了什么问题，你理解的这个问题可能会是哪里出问题了，你尝试过什么解决方法。</p>
<p>切忌截一个报错信息就问解决方法。首先大家的时间都很宝贵，这是一种不尊重别人时间的表现；其次大家都愿意帮助乐于思考的人。搜索引擎是你解决问题的利器，大多数解决不了的问题都是你没有选对搜索引擎，或是你没有准确的描述出问题的信息。</p>
<p>还有个<code>学习的能力</code>：学习是一个终身的事业，尤其是对于计算机行业，学会坚持主动学习、高效学习是很重要的。对待学习这件事，每个人的效率不一样，这就导致了人跟人之间的差距。这里有两个需要注意的：</p>
<h5 id="构建知识体系">构建知识体系</h5>
<p>在明确目标，开始学习前，不要那么急于上手干，还要学会构建出自己的知识体系。</p>
<p>就拿读书来说，大部分人读书习惯于翻开第一页开始看，其实这是很低效的，拿到一本书以后，一定要先看目录，因为对于一本书来说，目录就是他的知识体系。明白整个体系后整本书大概就了然于胸，之后会选一些对我当前工作学习有帮助的内容去看，很少会从第一页开始。</p>
<p>同样的编程也一样，比如你想成为一名前端工程师。你要做的并不是先买书、看视频、搭建开发环境。而是要先了解到成为一名前端开发工程师需要哪些知识体系，你可以自己搜索或者请教有经验的人了解到。也就是你在学习之前把你要学的东西大概框架先搞懂，然后再去对应每一个深入的学习。你的学习计划也就出来了。每学完一个地方你的潜意识就会给你反馈，又离目标进了一步，你的学习效率自然会提高，也会更有动力。随着水平的提高，定期更新你的知识体系就好了。</p>
<h5 id="学会应用">学会应用</h5>
<p>对于编程学习来说，应用是非常重要的。知识的学习本质是要解决问题的。如果在学习的过程中你能注重应用，那么会让你产生乐趣与满足感。</p>
<p>在你学习一个阶段之后，可以去找一些小的案例，涵盖住学过的知识，然后自己动手仿造做出一个。不仅复习了前一段的知识，有了作品还很大程度上增加了满足感，让你更有学习的劲头。</p>
<p>最后想谈一下学习的态度：</p>
<p>每个人都是<code>急于求成</code>的，一些教程也很能抓住这个心理。你肯定看过很多诸如<code>几个小时学会什么</code>、<code>几天什么从入门到精通</code>等等。但是很不幸告诉你，任何领域的高手都是需要一个长期投入的过程。而当你看到这里的时候，我相信你是有信心坚持下去的，而当你已经坚持了几个月了，好吧，你该上路了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈 JavaScript 中的内存管理与垃圾回收]]></title>
        <id>https://baoyuantop.github.io/post/qian-tan-javascript-zhong-de-nei-cun-guan-li-yu-la-ji-hui-shou/</id>
        <link href="https://baoyuantop.github.io/post/qian-tan-javascript-zhong-de-nei-cun-guan-li-yu-la-ji-hui-shou/">
        </link>
        <updated>2020-01-01T07:29:36.000Z</updated>
        <summary type="html"><![CDATA[<p>一点读书笔记</p>
]]></summary>
        <content type="html"><![CDATA[<p>一点读书笔记</p>
<!-- more -->
<h3 id="浅谈-javascript-内存管理与垃圾回收">浅谈 JavaScript 内存管理与垃圾回收</h3>
<p>写过<code>C语言</code>的都清楚，我们需要时时刻刻关心处理程序的内存使用情况，这无形的给程序员增添了很多负担，但是在后期出现的一些语言中渐渐的都加入了内存自动管理和垃圾回收机制，这样一来我们就不必再关心程序运行的内存使用情况，同样的在<code>JavaScript</code>中也有内存管理和垃圾回收。但是这样渐渐的内存中的东西就离我们越来越远，直至现在很多入门前端的对内存的情况一概不知，我也是，当然这是错误的。</p>
<h4 id="内存分配">内存分配</h4>
<blockquote>
<p>内存分配的最终目的就是为了配合垃圾回收机制，使得程序运行时占用内存更少，从而效率更高。</p>
</blockquote>
<p>我们都知道数据类型有两种：<code>基础类型和引用类型</code>，不同的类型采用着不同的存储方式。</p>
<h5 id="基础类型与栈内存">基础类型与栈内存</h5>
<p>基础类型值包括：<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>number</code>、<code>string</code>和<code>symbol</code>。这些类型的值大多有固定的大小，<code>JavaScript</code>将它们保存在栈内存中直接按值引用。<br>
栈是一种线性的数据结构，典型特点是<code>先进后出, 后进先出</code>,当<code>JavaScript</code>中一个方法执行的时候，该方法就建立一个内存栈，然后将方法中定义的变量放入栈中，当我们需要的时候直接按值引用即可。当方法执行结束后就销毁。</p>
<h5 id="引用类型与堆内存">引用类型与堆内存</h5>
<p><code>JavaScript</code>的引用类型大多长度不固定，比如<code>Array</code>，它的长度并不是固定的。他的值保存在堆内存的对象中。然后将它的地址放入栈中，而且不允许我们直接访问堆内存中的位置，所以我们操作的都是对象的引用，并不是实际的对象。<br>
在程序中创建一个对象的成本是比较大的，在创建完成后就会被保存在堆数据区，并不会随着方法的结束而销毁。只有当这个对象没有被任何引用变量引用的时候，垃圾回收的时候才会回收掉它。</p>
<h4 id="垃圾回收">垃圾回收</h4>
<p><code>JavaScript</code>具有自动垃圾收集机制，执行环境会负责找出那些不再继续使用的变量然后释放其占用的内存。对于找出垃圾的方法通常有两个策略：</p>
<h5 id="标记清除">标记清除</h5>
<p>这是最常用的垃圾收集机制。这种算法假定一个根对象，然后遍历所有从根开始引用的对象，垃圾收集器在运行的时候会将他们加上标记，然后去掉环境中使用的变量和被他们引用的变量的标记。之后再被加上标记的变量就是要删除的，垃圾收集器将其释放完成一次工作。</p>
<h5 id="引用计数">引用计数</h5>
<p>这种机制为每一个值标记被引用的次数并追踪，当被其他变量引用的时候就加一，反之就减一，当引用次数变成 0 的时候就是需要回收的了。垃圾收集器下次运行的时候就会把它释放掉。但是这样会有一个问题，比如：</p>
<pre><code class="language-javascript">let obj1 = new Object();
let obj2 = new Object();

obj1.attr1 = obj2;
obj2.attr2 = obj1;
</code></pre>
<p>在这里<code>obj1</code>和<code>obj2</code>各自互相引用，这块语句执行过后他们的引用次数永远不会变成 0 ，也就得不到回收，如果存在大量这种情况的话内存就出问题了。只要有出现循环引用的地方，这种机制就会出问题。所以它无法处理循环引用的问题。</p>
<h3 id="v8引擎的垃圾回收">V8引擎的垃圾回收</h3>
<p>V8 采用一种叫做<code>分代回收</code>的策略。将内存分为新生代和老生代，新生代存放存活时间段的对象，老生代则存放存活时间长或者常驻内存的对象。</p>
<ul>
<li>
<p>大多数的对象会被分配到新生代内存中，回收算法将这里的内存空间一分为二，一个处于使用状态一个处于闲置状态。分配对象的时候先把它放在使用区中，开始垃圾回收的时候就检查使用区中存活的对象，将他们复制到闲置区中并适当紧缩，最后释放使用区上剩下的数据。然后闲置区变成使用区，使用区变成闲置区，循环往复。</p>
</li>
<li>
<p>当一个对象经过多次清理后依然存在，它就会被移动到老生代，称为<code>晋升</code>。</p>
</li>
<li>
<p>老生代占用内存较多，主要采用<code>标记清除</code>和<code>标记整理</code>两个策略。在标记阶段遍历堆中的所有对象，标注那些活着的对象，然后在清除阶段<code>标记清除</code>会清除掉没有被标记的对象。但是这会产生内存碎片。<code>标记清理</code>在清理的时候可以解决碎片问题，它将活着的对象向内存中的一段移动，然后清理掉边界外的内存。不过这个过程涉及到数据移动，所以效率不是很高。</p>
</li>
</ul>
<p>除此之外 V8 中还使用了<code>增量标记</code>，让垃圾回收与应用逻辑交替进行，以减少垃圾回收时的停顿时间；在标记完成后还可以<code>惰性清理</code>；以及后期中引入了并行标记和并行清理，通过并行来利用多核 CPU 性能。这些无疑让 V8 成为了最出色的 JavaScript 引擎。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 引用类型]]></title>
        <id>https://baoyuantop.github.io/post/javascript-yin-yong-lei-xing/</id>
        <link href="https://baoyuantop.github.io/post/javascript-yin-yong-lei-xing/">
        </link>
        <updated>2020-01-01T07:23:51.000Z</updated>
        <summary type="html"><![CDATA[<p>一点读书笔记</p>
]]></summary>
        <content type="html"><![CDATA[<p>一点读书笔记</p>
<!-- more -->
<h3 id="javascript-引用类型">JavaScript 引用类型</h3>
<p>所谓引用类型，在<code>ECMAScript</code>中表示一种数据结构，其中有一些数据和方法，在其他语言中大多被称为<em>类</em>,但是在这里我们一般不这样称呼。即使<code>ECMAScript</code>是一门面向对象语言，但是它不具备传统面向对象语言中所支持的类和接口。他们描述的是一类对象所具有的属性和方法。引用类型的值就是一个对象，它是引用类型的一个实例。<br>
新对象是用一个<code>new</code>操作符后面跟上一个构造函数创建的。所谓构造函数本质上是一个函数，这个函数的目的是为了创建某一类对象，函数中包含了创建该对象所需要的东西。<br>
<code>ECMAScript</code>中提供其他各种类型的引用类型。</p>
<h4 id="基本类型和引用类型的值">基本类型和引用类型的值</h4>
<blockquote>
<p>JavaScript 中的变量与其他语言的变量有很大差别,独特的松散类型的特性，决定了它只是特定时间用来保存特定值的一个名字而已。它的数据类型在生命周期中是可以随时改变的。Crazy and Powerful !</p>
</blockquote>
<p>在一个变量中可能存在两种不同数据类型的值：基本类型值和引用类型值。基本类型值是按值引用的，我们可以操作保存在变量中实际的值。但是引用类型就不同了，引用类型的值是保存在内存中的对象，而<code>JavaScript</code>是不允许直接操作内存空间的。所以说我们在操作对象的时候操作的是对象的引用而不是实际的对象。所以对象是按引用访问的。</p>
<ul>
<li>引用类型具有动态的属性</li>
</ul>
<p>两种类型在定义的时候是相似的，创建一个变量并且为它赋值。但是引用类型允许我们更改其属性和方法，而基本类型值没有这个功能。当我们为基本类型值增添属性后虽然不会报错，但是却是无效的。</p>
<ul>
<li>变量值的复制</li>
</ul>
<p>对于基本类型值来说，从一个变量复制给另一个变量的时候，会在新的变量上创建一个新值，然后把值复制过去。从此这两个值就没了联系，不会相互影响了。但如果是从一个变量向另一个变量复制引用类型的值的时候，复制过去的其实是一个指针，指向存在堆中的一个对象，然后两个变量引用同一个对象，改变一个，会影响另一个：</p>
<pre><code class="language-javascript">let obj1 = new Object();
let obj2 = obj1;
obj1.name = 'Baoyuan';
console.log(obj2.name); //'Baoyuan'
</code></pre>
<ul>
<li>参数的传递</li>
</ul>
<blockquote>
<p><code>ECMAScript</code> 中所有函数的参数都是按值传递的。</p>
</blockquote>
<p>向函数传递基本类型的值的时候，被传递的值被复制给命名参数。而对于引用类型来说，会把这个值在内存中的地址复制给命名参数，这会导致函数内值的改变反应在函数外部：</p>
<pre><code class="language-javascript">function setName (obj) {
    obj.name = 'Baoyuan';
};
let people = new Object();
setName(people); // 将people对象地址复制给了函数内部的obj，也就是说引用同一个对象。
console.log(people.name); //'Baoyuan'
</code></pre>
<p>即使这个对象是按值传递的，因为 people 指向的对象在堆内存中只有一个， obj 会按引用来访问同一个对象。</p>
<p>我们先来看最常见用的最多的一种-<code>Object</code>。</p>
<h4 id="object">Object</h4>
<p><code>Object</code>是典型的引用类型值，虽然它的实例中并不具备很多功能，但是大多数我们所见的引用类型值都是他的实例。而且对于我们在程序中存储和传输数据来说是不可或缺的。<br>
通常我们可以使用<code>new</code>方法来创建一个对象：</p>
<pre><code class="language-javascript">let peopele = new Object();
people.age = 23;
people.name = 'Baoyuan';
</code></pre>
<p>我们创建了一个<code>people</code>对象并为其设置了姓名和年龄属性,同样的使用对象字面量也可以有相同的效果：</p>
<pre><code class="language-javascript">let people = {
    name: 'Baoyuan',
    age: 23
};
</code></pre>
<p>在使用这种方式的时候属性名也可以用字符串表示，一般我们推荐使用字面量创建，它的代码简洁而且它也是向函数传递大量参数的首选方式。<br>
我们可以通过点访问法访问其属性：</p>
<pre><code class="language-javascript">console.log(people.name); //Baoyuan
</code></pre>
<p>除此之外还有一种更为灵活的方式，当我们的属性名中含有包含会导致语法错误的字符串或者是保留字的话，我们可以使用<code>[]</code>来访问：</p>
<pre><code class="language-javascript">people['name'] = 'Bao yuan'; //属性名以字符串形式放入，属性值中含有空格。
</code></pre>
<p>这种方式还可以通过变量来访问属性：</p>
<pre><code class="language-javascript">let item = 'name';
people[item]; //Baoyuan
</code></pre>
<p>同常来说除非必须使用<code>[]</code>的情况下，一般建议用点表示法。</p>
<p>除此之外引用类型还有<code>Array</code>、 <code>Date</code>、 <code>RegExp</code>、 <code>Function</code>等。</p>
<h4 id="类型判断">类型判断</h4>
<p>在检测基本数据类型的时候我们使用<code>typeof</code>但是如果我们在引用类型上使用的话都会返回<code>object</code>，这并不是我们想要的。为此<code>ECMAScript</code>提供了<code>instanceof</code>：</p>
<blockquote>
<p>result = variable instanceof constructor</p>
</blockquote>
<p>它会根据原型链来识别，比如：</p>
<pre><code class="language-javascript">console.log(people instanceof Array); //变量people是Array类型吗？
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 基础数据类型]]></title>
        <id>https://baoyuantop.github.io/post/javascript-ji-chu-shu-ju-lei-xing/</id>
        <link href="https://baoyuantop.github.io/post/javascript-ji-chu-shu-ju-lei-xing/">
        </link>
        <updated>2020-01-01T07:20:04.000Z</updated>
        <summary type="html"><![CDATA[<p>一点读书笔记</p>
]]></summary>
        <content type="html"><![CDATA[<p>一点读书笔记</p>
<!-- more -->
<h3 id="javascript-中的基本数据类型">JavaScript 中的基本数据类型</h3>
<h4 id="静态类型语言与动态类型语言">静态类型语言与动态类型语言</h4>
<p>在编程语言中有这两种情况之分，具体的含义为：</p>
<blockquote>
<p>动态类型语言是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。<br>
--维基百科</p>
</blockquote>
<p>而静态类型语言则与之相反，典型的动态类型语言有<code>JavaScript</code> <code>PHP</code> <code>Python</code> <code>Ruby</code> 等。</p>
<h4 id="基本数据类型">基本数据类型</h4>
<p>在<code>JavaScript</code>中共有 5 种简单数据类型（暂不考虑 <code>Symbol</code>）： <code>Undefined</code>、 <code>Boolean</code>、 <code>Null</code>、 <code>Number</code> 和<code>String</code>，还有一种复杂的数据类型--<code>Object</code>。我们先分别看一下各自的特点。</p>
<h5 id="undefined">Undefined</h5>
<p><code>Undefined</code> 类型只有一个值，即特殊的 Undefined。当我们使用<code>let</code>声明了一个变量但是并未初始化赋值，它的值就是<code>Undefined</code>：</p>
<pre><code class="language-javascript">let javascript; //等价于 let javascript = undefined; 但没必要这样
javascript === undefined; //true
</code></pre>
<p><em>注意请与未定义分开</em>：</p>
<pre><code class="language-javascript">let javascript;
console.log(javascript); //&quot;undefined&quot;
console.log(java); //java is not define;
</code></pre>
<h5 id="null">Null</h5>
<p>同样的，<code>Null</code>也是只有一个值的数据类型：null。它表示一个空的对象指针,如果我们定义了一个变量准备将来存放对象，我们就可以将它初始化为<code>null</code>。</p>
<h5 id="boolean">Boolean</h5>
<p>这种类型在大多数编程语言中都很常见，该类型有两个值：<code>true</code>和<code>false</code>。请注意不要把它与数字01产生联系。还要注意的是他是区分大小写的，<code>True</code>并不是布尔值，只是标识符。虽然字面值只有两个，但<code>ECMAScript</code>中所有类型中都有与之相对应的值，如果要将一个其他值转换为布尔值，可以使用<code>Boolean</code>函数来转型。</p>
<pre><code class="language-javascript">let item = &quot;javascript&quot;;
let booleanitem = Boolean(item); //true
</code></pre>
<h5 id="number">Number</h5>
<p>在<code>JavaScript</code>中使用 <em>IEEE754</em>格式来表示整数和浮点数值。基本数字字面量有<em>十进制整数</em>、<em>八进制整数</em>和<em>十六进制整数</em>。在算数运算时所有八进制和十六进制都将转换为十进制数值。</p>
<ul>
<li>浮点数值</li>
</ul>
<blockquote>
<p>数值中必须包含一个小数点，并且小数点后必须有一个数字。</p>
</blockquote>
<p>浮点数值的最高精度是17位小数，但是在算数运算中精度远远不如整数：</p>
<pre><code class="language-javascript">0.1 + 0.2 === 0.3; //false,舍入误差；
console.log(0.1 + 0.2); //0.30000000000000004
</code></pre>
<ul>
<li>数值范围</li>
</ul>
<blockquote>
<p><code>ECMAScript</code> 能保存的最小数值保存在<code>Number.MIN_VALUE</code>中,在大多数浏览器中为<code>5e-324</code>;能保存的最大值保存在<code>Number.MAX_VALUE</code>中，在大多数浏览器中为<code>1.7976931348623157e+308</code>。</p>
</blockquote>
<p>如果在某次计算中超出了这一值，那么会被转化成<code>Infinity</code>(正无穷)或者<code>-Infinity</code>(负无穷)，并且无法参与下一次的计算。</p>
<ul>
<li>NaN</li>
</ul>
<blockquote>
<p>NaN 即 Not a Number。这个数值用来表示一个本来要返回数值的操作数未返回数值的情况。</p>
</blockquote>
<p>它有两个显著的特点。<br>
任何涉及 NaN 的操作都会返回 NaN。</p>
<pre><code class="language-javascript">console.log(NaN/100); //NaN
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS 函数知多少（下）]]></title>
        <id>https://baoyuantop.github.io/post/js-han-shu-zhi-duo-shao-xia/</id>
        <link href="https://baoyuantop.github.io/post/js-han-shu-zhi-duo-shao-xia/">
        </link>
        <updated>2020-01-01T07:11:39.000Z</updated>
        <summary type="html"><![CDATA[<p>一点读书笔记</p>
]]></summary>
        <content type="html"><![CDATA[<p>一点读书笔记</p>
<!-- more -->
<p>在<code>JavaScript</code>中执行一段代码的时候，它会创建出对应的执行上下文。作为一个重要的概念，它定义了变量或者函数有权访问的其他数据，决定了他们各自的行为。对于每一个执行上下文，都有三个重要的属性：</p>
<ul>
<li>变量对象</li>
<li>作用域链</li>
<li>this</li>
</ul>
<h4 id="变量对象">变量对象</h4>
<p>每个执行上下文都有一个与之对应的变量对象，它存储了在上下文中定义的变量和函数声明。当然在全局上下文中的变量对象就是全局对象了。</p>
<p>在处理一个执行上下文时有两个过程：</p>
<ol>
<li>进入该执行上下文</li>
</ol>
<p>这个时候是还没有执行代码，其中的变量对象中主要是函数的所有形参、函数声明和对象声明。</p>
<ol start="2">
<li>执行代码</li>
</ol>
<p>这个时候代码会顺序执行，然后根据实际情况来修改变量对象。</p>
<p>举个栗子：</p>
<pre><code class="language-javascript">function demo(a) {
    var b = 2;
    function c() {};
    var d = function () {};
    b = 3;
}
demo(1);
</code></pre>
<p>在刚进入这个执行上下文的时候，变量对象是这样的：</p>
<pre><code class="language-javascript">AO = {
    arguments: {
        0: 3;
        length: 1;
    },
    a: 1,
    b: undefined,
    c: reference to function c() {},
    d: undefined
}
</code></pre>
<p>当开始执行代码的时候就是这样的：</p>
<pre><code class="language-javascript">AO = {
    arguments: {
        0: 1,
        length: 1
    },
    a: 1,
    b: 3,
    c: reference to function c() {},
    d: reference to function d() {}
    
}
</code></pre>
<h4 id="作用域链">作用域链</h4>
<blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6">计算机</a><a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88">程序设计</a>中，<strong>作用域</strong>（scope，或译作有效范围）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。不同的<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80">编程语言</a>可能有不同的<strong>作用域</strong>和<a href="https://zh.wikipedia.org/w/index.php?title=%E5%90%8D%E5%AD%97%E8%A7%A3%E6%9E%90&amp;action=edit&amp;redlink=1">名字解析</a>。而同一语言内也可能存在多种<strong>作用域</strong>，随<a href="https://zh.wikipedia.org/wiki/%E5%AF%A6%E9%AB%94">实体</a>的<a href="https://zh.wikipedia.org/wiki/%E7%B1%BB%E5%9E%8B">类型</a>变化而不同。<strong>作用域类别</strong>影响<a href="https://zh.wikipedia.org/wiki/%E5%8F%98%E9%87%8F">变量</a>的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A&amp;action=edit&amp;redlink=1">绑定</a>方式，根据语言使用<strong>静态作用域</strong>还是<strong>动态作用域</strong><a href="https://zh.wikipedia.org/wiki/%E5%8F%98%E9%87%8F">变量</a>的取值可能会有不同的结果。</p>
<p>--维基百科</p>
</blockquote>
<p><code>JavaScript</code>在执行程序需要查找一个变量的时候，首先它会查看当前的执行上下文的变量对象，没有找到的话就去父级执行上下文的变量对象，要是还没有就去全局变量对象，直到找到。由多个执行上下文的变量对象构成的链表就是作用域链。</p>
<p>函数的作用域链在它创建的时候就决定了。在函数内部都有一个<code>scope</code>的属性，当我们创建的时候它就会把所有的父级的变量对象存储在里面。但是这并不是一条完整的作用域链，只有当程序进入该执行上下文，会把当前的变量对象添加到最前端，这是才是一条完整的作用域链。</p>
<h4 id="this">this</h4>
<p>简单看下<code>this</code>:</p>
<pre><code class="language-javascript">function demo() {
    console.log(this.a);
};
var a = 1;
demo();

const obj = {
    a: 1,
    fun: demo
};
obj.demo();

const c = new demo();
</code></pre>
<p>对于直接调用函数<code>demo()</code>，里面的<code>this</code>则直接指向了<code>window</code>。而当对象<code>obj</code>来调用这个函数，那么<code>this</code>此时则就代表该对象。也就是谁调用就代表谁。而在最后使用<code>new</code>的话<code>this</code>就被永远绑在了<code>c</code>上面。而对于特殊的箭头函数，它本身没有<code>this</code>，它取决于包裹箭头函数的第一个普通函数。</p>
<p>使用<code>bind()</code>函数可以改变<code>this</code>的指向，它会创建一个新的函数并将<code>this</code>绑定传入的参数。</p>
<pre><code class="language-javascript">var obj = {
    a: 1,
    getA: function () {
        return this.a;
    }
};
var b = obj.getA.bind(obj);
console.log(b); // 1
</code></pre>
<p>当然这对箭头函数是无效的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS 函数知多少]]></title>
        <id>https://baoyuantop.github.io/post/js-han-shu-zhi-duo-shao/</id>
        <link href="https://baoyuantop.github.io/post/js-han-shu-zhi-duo-shao/">
        </link>
        <updated>2020-01-01T06:59:58.000Z</updated>
        <summary type="html"><![CDATA[<p>一点读书笔记</p>
]]></summary>
        <content type="html"><![CDATA[<p>一点读书笔记</p>
<!-- more -->
<h3 id="js函数知多少上">JS函数知多少(上)</h3>
<p>说起来<code>JavaScript</code>中最有意思的东西，莫过于函数了。</p>
<p>函数在任何一种编程语言中应该都存在，可以将经常使用的代码封装起来，在需要的地方多次调用。在<code>JavaScript</code>中也是这个意思，不过它还有他自己独特的地方。</p>
<p><code>Function</code>作为一种引用类型，每个函数都是<code>Function</code>类型的实例，定义：</p>
<pre><code class="language-javascript">function functionName (argnments) {
    // something...
};
</code></pre>
<p>你也可以使用函数表达式：</p>
<pre><code class="language-javascript">let fun = function (argument) {
    // something...
};
</code></pre>
<p>使用这种方式的时候不用写函数名，使用<code>fun</code>即可引用。这两种方式几乎相差无几。</p>
<p>它具有引用类型的属性与方法。所以本质上函数是对象。你可能没见过这样的操作：</p>
<pre><code class="language-javascript">let addNum = new Function('num1', 'num2', 'return num1+num2');
</code></pre>
<p>上面这个实际上是定义了一个函数，接受两个参数，返回两个数字的和。很形象的表现了对象的本质，但是实际使用的时候不推荐这样写。</p>
<p>因为是以对象为形式在内存中存储的，所以函数的名字本质上只是一个指向函数的指针，这样的话一个函数也可以有多个名字了，只是多个指针引用了同一个对象。我们也可以通过给某个名字赋值<code>null</code>来解除这种引用。这种特性引出了<code>JS</code>函数的一个特点：<code>没有重载</code>。因为当你创建第二个相同名字的函数的时候就把第一个引用给覆盖掉了。</p>
<p>函数是可以作为值来引用的，你可以给函数传递参数的时候传递一个函数，你也可以在返回值的时候返回一个函数，这在某些场景下是十分有用的。</p>
<p>在函数中有两个属性需要注意下：</p>
<h4 id="arguments">arguments</h4>
<p>它是一个跟数组差不多的对象，保存着传进函数的所有参数，我们可以很方便的查看，进行一些操作。比如根据传入参数的情况判断对应的操作。</p>
<h4 id="this">this</h4>
<p>当初设计<code>js</code>的时候被迫进行模仿<code>Java</code>，所以这个特性跟<code>Java</code>中的类似。<code>this</code>引用的是函数执行的环境对象。这个要看具体的情况具体分析。比如当在网页的全局环境下调用函数的话，<code>this</code>对象引用的就是<code>window</code>。它可以在代码的执行过程中引用不同的对象。</p>
<p>不过还需要注意一个特殊的类别：箭头函数。箭头函数是没有<code>this</code>的，它的这个属性只取决于包裹箭头函数的第一个普通函数的<code>this</code>。</p>
<p>下一篇从作用域角度再详细说明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ES6中的 Symbol]]></title>
        <id>https://baoyuantop.github.io/post/es6-zhong-de-symbol/</id>
        <link href="https://baoyuantop.github.io/post/es6-zhong-de-symbol/">
        </link>
        <updated>2020-01-01T06:47:02.000Z</updated>
        <summary type="html"><![CDATA[<p>一点读书笔记</p>
]]></summary>
        <content type="html"><![CDATA[<p>一点读书笔记</p>
<!-- more -->
<h3 id="javascript-之-symbol">JavaScript 之 Symbol</h3>
<h4 id="symbol是什么">Symbol是什么</h4>
<blockquote>
<p><code>Symbol</code>是<code>ES6</code>中新引入的一种基本数据类型。<code>Symbol()</code>函数会返回 symbol 类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的 symbol 注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：<code>new Symbol()</code>。</p>
</blockquote>
<p>也就是说<code>Symbol</code>作为一种新的基本数据类型，我们可以使用：</p>
<pre><code class="language-javascript">let a = Symbol();
</code></pre>
<p>此时<code>a</code>便是一个<code>Symbol</code>类型的变量，它现在是独一无二的：</p>
<pre><code class="language-javascript">let b = Symbol();
a === b; //false
</code></pre>
<p>它还可以接受一个参数，我们可以给它传递一个字符串当描述，即使两个字符相同串也ok：</p>
<pre><code class="language-javascript">let symbol1 = Symbol('some');
let symbol2 = Symbol('some');
symbol1 === symbol2; //false
</code></pre>
<p>如果参数是对象的话，会先调用对象的<code>toString</code>方法来转换为字符串。<br>
也就是说每一个<code>Symbol</code>创造出来的值都是不一样的。需要注意的是不能使用<code>new</code>的方式来创建：</p>
<pre><code class="language-javascript">let c = new Symbol(); //TypeError: Symbol is not a constructor
</code></pre>
<h4 id="symbol的使用姿势">Symbol的使用姿势</h4>
<h5 id="给对象增加属性">给对象增加属性</h5>
<p>在<code>ES5</code>之前对象的属性名大多都是字符串，起名字是个难事，而且名字一多动不动重复了就出错了。而且有的时候我们拿过别人的代码，要给其中一个对象增加属性，我们也不知道怎么起名字不重复，这也是<code>ES6</code>中引入<code>Symbol</code>的根本原因。</p>
<pre><code class="language-javascript">let name = Symbol('name'); //加入 name 作为描述
let obj = {
    [name]: 'Baoyuan' //必须放在方括号之中
};
obj[name]; //'Baoyuan'
</code></pre>
<h5 id="属性名的遍历">属性名的遍历</h5>
<p>对象中的普通属性,我们可以使用<code>Object.keys()</code>、<code>for...in</code>或者<code>Object.getOwnPropertyNames()</code>来进行遍历，但是他们并不能遍历出<code>Symbol</code>类型的属性名。请注意，它并不是私有属性。我们可以使用<code>Object.getOwnPropertySymbols</code>的方法来获取指定对象的<code>Symbol</code>属性。它会返回当前对象中所有<code>Symbol</code>类型的属性的<code>Symbol</code>值的数组：</p>
<pre><code class="language-javascript">let a = Symbol('a');
let b = Symbol('b');
let c = 'c';
let obj = {
    [a]: 'a',
    [b]: 'b',
    c: 'c'
};
let objNames = Object.getOwnPropertySymbols(obj);
console.log(objNames); // [Symbol(a), Symbol(b)]
let objName = Object.getOwnPropertyNames(obj);
console.log(objName); // [&quot;c&quot;]
</code></pre>
<p>使用<code>Reflect.ownKeys</code>可以遍历到所有的属性名：</p>
<pre><code class="language-javascript">let names = Reflect.ownKeys(obj);
console.log(names); // [&quot;c&quot;, Symbol(a), Symbol(b)]
</code></pre>
<h5 id="symbol值的重复引用">Symbol值的重复引用</h5>
<p>有时候新建了一个<code>Symbol</code>值但是在其他地方我们希望再次使用，这时即使使用相同的描述符也不会产生同一个值，这时我们就需要<code>Symbol.for()</code>:</p>
<pre><code class="language-javascript">let a = Symbol.for('hello');
let b = Symbol.for('hello');
a === b; // true
</code></pre>
<p>其实这两种写法都会产生新的<code>Symbol</code>，不过不同的是<code>Symbol</code>每次都产生一个新的值，而<code>Symbol.for</code>会先查看给定的<code>key</code>值是否存在，不存在了再去新建，并且还会被登记在全局环境中供搜索。我们可以使用<code>Symbol.keyFor</code>查看一个已登记的<code>Symbol</code>值的<code>key</code>:</p>
<pre><code class="language-javascript">Symbol.keyFor(a); // &quot;hello&quot;
</code></pre>
<h4 id="ecmascript-中的定义">ECMAScript 中的定义</h4>
<p>我们先来想一下它的主要特征</p>
<ul>
<li>
<p>返回一个<code>Symbol</code>类型，并且是唯一的不会重复。</p>
</li>
<li>
<p>使用<code>new</code>操作符初始化会报错。</p>
</li>
<li>
<p>可以接受字符串参数作为标注，接受对象的时候调用对象的<code>toString</code>，即使参数相同返回的值也不同。</p>
</li>
</ul>
<p>最后查看一下<code>ECMAScript</code>定义的<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-symbol-description">规范</a>。</p>
<blockquote>
<p>When Symbol is called with optional argument description, the following steps are taken:</p>
</blockquote>
<ol>
<li>If NewTarget is not undefined, throw a TypeError exception.</li>
<li>If description is undefined, let descString be undefined.</li>
<li>Else, let descString be ToString(description).</li>
<li>ReturnIfAbrupt(descString).</li>
<li>Return a new unique Symbol value whose [[Description]] value is descString.</li>
</ol>
<p>规范中指出了当我们调用<code>Symbol</code>的时候有几个步骤：</p>
<ol>
<li>
<p>如果我们使用了<code>new</code>，就报错。</p>
</li>
<li>
<p>如果没有传递参数，那么就使用<code>undefined</code>作为描述字.</p>
</li>
<li>
<p>如果传了的话就把它转换为字符串。</p>
</li>
<li>
<p>报错就返回。</p>
</li>
<li>
<p>新返回一个唯一的<code>Symbol</code>值，它的<code>[[Description]]</code>属性值为<code>descString</code>。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue 数据响应式原理]]></title>
        <id>https://baoyuantop.github.io/post/vue-shu-ju-xiang-ying-shi-yuan-li/</id>
        <link href="https://baoyuantop.github.io/post/vue-shu-ju-xiang-ying-shi-yuan-li/">
        </link>
        <updated>2020-01-01T02:10:33.000Z</updated>
        <summary type="html"><![CDATA[<p>Vue 的数据响应式原理是怎么实现的</p>
]]></summary>
        <content type="html"><![CDATA[<p>Vue 的数据响应式原理是怎么实现的</p>
<!-- more -->
<h3 id="vue-数据响应式原理">Vue 数据响应式原理</h3>
<h3 id="什么是数据响应式">什么是数据响应式</h3>
<blockquote>
<p>数据响应式即数据双向绑定，将<code>Model</code>绑定到<code>view</code>, 当我们用 Javascript代码更新<code>Model</code>时，<code>View</code>就会自动更新；如果用户更新了<code>View</code>, <code>Model</code>也会自动更新。</p>
</blockquote>
<h3 id="数据响应式原理">数据响应式原理</h3>
<ul>
<li>在Vue中主要是利用了 <code>Object.defineProperty()</code> 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。</li>
<li>在Vue 3.0 中采用 ES6 中的 <code>Proxy</code> 对象来实现。</li>
</ul>
<h4 id="数据响应式实现">数据响应式实现</h4>
<ul>
<li>以下采用 Object.defineProperty() 来实现。</li>
</ul>
<ol>
<li>根据订阅发布者模式实现一个整体架构，包括 <code>MVVM</code> 类，<code>Vue</code>类， <code>Watcher</code>类。</li>
</ol>
<pre><code class="language-Javascript">    //发布者
    class Vue {
        constructor (options) {
            this.options = options;
            this.$data = options.data; //获取数据
            this.$el = document.querySelector(options.el); //获取挂载对象
        }
        //劫持监听所有属性
        Observer () {

        }
        //解析指令
        Compile () {

        }
    }
</code></pre>
<ol start="2">
<li>实现 <code>MVVM</code> 中的由 M 到 V，将模型中的数据绑定到视图。</li>
</ol>
<pre><code class="language-Javascript">    //发布者
    class Vue {
        constructor (options) {
            this.options = options;
            this.$data = options.data; //获取数据
            this.$el = document.querySelector(options.el); //获取挂载对象
            this._directive = {}; //创建容器存放订阅者
            this.Observer(this.$data);
            this.Compile(this.$el);
        }
        //劫持监听所有属性
        Observer (data) {
            for (let key in data) {
                this._directive[key] = [];
            }
        }
        //解析指令
        Compile (el) {
            let Vnodes = el.children;
            for (Vnode of Vnodes) {
                //递归查找子元素
                if (Vnode.children.length) {
                    this.Compile(Vnode);
                }
                //判断是否含有对应的属性，做出相应的处理
                if (Vnode.hasAttribute('v-text')) {
                    let attrVal = node.getAttribute('v-text');
                    //向订阅者容器中添加对应的订阅者
                    this._directive[attrVal].push(new Watcher(node, this, attrVal, 'innerHTML'));
                }
                if (Vnode.hasAttribute('v-model')) {
                    let attrVal = node.getAttribute('v-model');
                    this._directive[attrVal].push(new Watcher(node, this, attrVal, 'value'));
                }
            }
        }
        //订阅者,更新视图
        class Watcher {
            constructor (el, vm, exp, attr) {
                this.el = el;
                this.vm = vm;
                this.exp = exp;
                this.attr = attr;
                this.update(); //初始化视图
            }
            update () {
                this.el[this.attr] = this.vm.$data[this.exp];
            }
        }
    }
</code></pre>
<ol start="3">
<li>最后实现 V 到 M，当视图变化的时候，触发更新模型中的数据。</li>
</ol>
<pre><code class="language-Javascript">    //发布者
    class Vue {
        constructor (options) {
            this.options = options;
            this.$data = options.data; //获取数据
            this.$el = document.querySelector(options.el); //获取挂载对象
            this._directive = {}; //创建容器存放订阅者
            this.Observer(this.$data);
            this.Compile(this.$el);
        }
        //劫持监听所有属性
        Observer (data) {
            for (let key in data) {
                this._directive[key] = [];
            }
        }
        //解析指令
        Compile (el) {
            let Vnodes = el.children;
            for (Vnode of Vnodes) {
                //递归查找子元素
                if (Vnode.children.length) {
                    this.Compile(Vnode);
                }
                //判断是否含有对应的属性，做出相应的处理
                if (Vnode.hasAttribute('v-text')) {
                    let attrVal = node.getAttribute('v-text');
                    //向订阅者容器中添加对应的订阅者
                    this._directive[attrVal].push(new Watcher(node, this, attrVal, 'innerHTML'));
                }
                if (Vnode.hasAttribute('v-model')) {
                    let attrVal = node.getAttribute('v-model');
                    this._directive[attrVal].push(new Watcher(node, this, attrVal, 'value'));
                    node.addEventListener('input', (function () {
                        return function () {
                            this.$data[attrVal] = node.value;   //这里更新了 ~
                        }
                    })().bind(this)); //bind不会立即执行
                }
            }
        }
        //订阅者,更新视图
        class Watcher {
            constructor (el, vm, exp, attr) {
                this.el = el;
                this.vm = vm;
                this.exp = exp;
                this.attr = attr;
                this.update(); //初始化视图
            }
            update () {
                this.el[this.attr] = this.vm.$data[this.exp];
            }
        }
    }
</code></pre>
<ol start="4">
<li>同时更新相应视图。</li>
</ol>
<pre><code class="language-Javascript">    //发布者
    class Vue {
        constructor (options) {
            this.options = options;
            this.$data = options.data; //获取数据
            this.$el = document.querySelector(options.el); //获取挂载对象
            this._directive = {}; //创建容器存放订阅者
            this.Observer(this.$data);
            this.Compile(this.$el);
        }
        //劫持监听所有属性
        Observer (data) {
            for (let key in data) {
                this._directive[key] = [];
                let val = data[key];
                let watch = this._directive[key];
                //这里是核心 ！！！
                Object.defineProperty(this.$data, key, {
                    get: function () {
                        return val;
                    },
                    set: function (newVal) {
                        if (newVal !== val) {
                            val = newVal;
                            watch.forEach(ele =&gt; {  //ele为订阅者实例对象
                                ele.update();
                            })
                        }
                    }
                })
            }
        }
        //解析指令
        Compile (el) {
            let Vnodes = el.children;
            for (Vnode of Vnodes) {
                //递归查找子元素
                if (Vnode.children.length) {
                    this.Compile(Vnode);
                }
                //判断是否含有对应的属性，做出相应的处理
                if (Vnode.hasAttribute('v-text')) {
                    let attrVal = node.getAttribute('v-text');
                    //向订阅者容器中添加对应的订阅者
                    this._directive[attrVal].push(new Watcher(node, this, attrVal, 'innerHTML'));
                }
                if (Vnode.hasAttribute('v-model')) {
                    let attrVal = node.getAttribute('v-model');
                    this._directive[attrVal].push(new Watcher(node, this, attrVal, 'value'));
                    node.addEventListener('input', (function () {
                        return function () {
                            this.$data[attrVal] = node.value;
                        }
                    })().bind(this)); //bind不会立即执行
                }
            }
        }
        //订阅者,更新视图
        class Watcher {
            constructor (el, vm, exp, attr) {
                this.el = el;
                this.vm = vm;
                this.exp = exp;
                this.attr = attr;
                this.update(); //初始化视图
            }
            update () {
                this.el[this.attr] = this.vm.$data[this.exp];
            }
        }
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue 的数据流]]></title>
        <id>https://baoyuantop.github.io/post/vuedeshujuliu/</id>
        <link href="https://baoyuantop.github.io/post/vuedeshujuliu/">
        </link>
        <updated>2020-01-01T01:05:40.000Z</updated>
        <summary type="html"><![CDATA[<p>Vue 中的数据流</p>
]]></summary>
        <content type="html"><![CDATA[<p>Vue 中的数据流</p>
<!-- more -->
<h3 id="双向绑定">双向绑定</h3>
<p>model(数据) 和 view(视图) 之间的绑定， 任一方的更新都会触发另一方的更新。</p>
<h3 id="单向数据流">单向数据流</h3>
<p>model的更新会触发视图更新， 视图的更新堆model没什么影响。</p>
<h3 id="vue-的应用">Vue 的应用</h3>
<ul>
<li>Vue是单向数据流，不是双向绑定。</li>
<li>Vue的双向绑定不过是语法糖。</li>
<li>Object.defineProperty 是Vue底层用来做数据响应式更新的，不是双向绑定。</li>
</ul>
<h3 id="数据驱动">数据驱动</h3>
<ul>
<li>Vue 是数据驱动的视图框架，DOM跟数据是相互映射的，只有数据改变的时候视图才会做出相应的更新。</li>
<li>数据可以来自与自身的 data 属性、父元素的 prop、或者状态管理 Vuex。</li>
<li>数据改变触发视图更新有一些条件：</li>
</ul>
<blockquote>
<ol>
<li>数据必须写进 data{},这样的话会有响应式。</li>
<li>仅把对象名称写进 data{} 是没有效果的，要写上属性。</li>
<li>data{} 中的数据要写进视图中，否则不会响应式。</li>
</ol>
</blockquote>
<p>基于这些特征我们要学会操作数据，不能直接操作 DOM。</p>
<h3 id="vue响应式更新原理">Vue响应式更新原理</h3>
<ul>
<li>实例化的时候会对 data{} 下的数据进行处理，添加 getter 与 setter 的代理，以后读取写入数据都要经过代理层。使用到 Object.defineProperty.</li>
<li>组件在渲染的时候将 data{} 中用到的数据放进 Watcher。</li>
</ul>
]]></content>
    </entry>
</feed>