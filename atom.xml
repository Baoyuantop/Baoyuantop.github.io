<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://baoyuantop.github.io</id>
    <title>Baoyuan&apos;s Blog</title>
    <updated>2021-07-31T09:07:12.328Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://baoyuantop.github.io"/>
    <link rel="self" href="https://baoyuantop.github.io/atom.xml"/>
    <logo>https://baoyuantop.github.io/images/avatar.png</logo>
    <icon>https://baoyuantop.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Baoyuan&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Rust 条件与循环]]></title>
        <id>https://baoyuantop.github.io/post/rust-tiao-jian-yu-xun-huan/</id>
        <link href="https://baoyuantop.github.io/post/rust-tiao-jian-yu-xun-huan/">
        </link>
        <updated>2021-07-26T14:06:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="条件执行">条件执行</h2>
<pre><code class="language-rust">let x = 5;
if x == 5 {
    println!(&quot;x is 5&quot;); // done
}
</code></pre>
<p>if 表达式，相当于 JavaScript 的三元表达式：</p>
<pre><code class="language-rust">let x_odd = if x % 2 == 0 { &quot;odd&quot; } else { &quot;even&quot; };
println!(&quot;x_odd is {}&quot;, x_odd); // x_odd is even
</code></pre>
<h2 id="多个条件-ifelse-if">多个条件 (if/else if)</h2>
<pre><code class="language-rust">let x = 2;
let y = 5;
if x &gt; y {
    println!(&quot;x is greater than  y&quot;);
} else if x &lt; y {
    println!(&quot;x is less than y&quot;); // done 
} else {
    println!(&quot;x is equal to y&quot;);
}
</code></pre>
<h2 id="循环">循环</h2>
<h3 id="使用-loop-循环">使用 <code>loop</code> 循环</h3>
<pre><code class="language-rust">loop {
    if count == 10 {
        break;
    }
    count += 1;
    println!(&quot;count is {}&quot;, count);
}
</code></pre>
<p>loop 会循环执行某个语法快，直到使用 <code>break</code> 停止循环或是手动停止程序。<br>
上述打印出：</p>
<pre><code class="language-rust">count is 1
count is 2
count is 3
count is 4
count is 5
count is 6
count is 7
count is 8
count is 9
count is 10
</code></pre>
<p>从循环中返回某个值：</p>
<pre><code class="language-rust">let result = loop {
    if count == 15 {
        // returning a value with break statement
        break count * 20;
    }
    count += 1;
    println!(&quot;count is {}&quot;, count); // 300
};
</code></pre>
<h3 id="使用-while-循环">使用 while 循环</h3>
<p>与 loop 循环不同的是，while 循环中 break 不能返回值。</p>
<pre><code class="language-rust">let mut count = 0;
let letters: [char; 5] = ['a', 'b', 'c', 'd', 'e'];

while count &lt; letters.len() {
    println!(&quot;letter [{}] is {}&quot;, count, letters[count]);
    count += 1;
}
</code></pre>
<p>结果:</p>
<pre><code class="language-rust">letter[0] is a
letter[1] is b
letter[2] is c
letter[3] is d
letter[4] is e
</code></pre>
<h3 id="for-循环">for 循环</h3>
<p>使用 <code>iter()</code> 方法返回一个迭代器。<br>
迭代器对集合类元素实现迭代，使用 <code>next()</code> 方法返回下一个迭代。</p>
<pre><code class="language-rust">for item in message.iter() {
    println!(&quot;current item is  {}&quot;, item);
}
</code></pre>
<p>使用 <code>enumerate()</code> 返回一个元组，包含当前迭代的元素的索引和引用。推荐对该元组进行解构。</p>
<pre><code class="language-rust">for (index, &amp;item) in message.iter().enumerate() {
    println!(&quot;item {} is {}&quot;, index, item);
    if item == 'e' {
        break;
    }
}
</code></pre>
<p>因为返回的元组中是元素的引用，使用 <code>&amp;item</code> 可以借用变量而不取得所有权。在循环中可以访问该变量。</p>
<p>迭代一组数字：</p>
<pre><code class="language-rust">for number in 0..5 {
    println!(&quot;number is {}&quot;, number); 
}
</code></pre>
<pre><code class="language-rust">number is 0
number is 1
number is 2
number is 3
number is 4
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Update state on unmounted component]]></title>
        <id>https://baoyuantop.github.io/post/update-state-on-unmounted-component/</id>
        <link href="https://baoyuantop.github.io/post/update-state-on-unmounted-component/">
        </link>
        <updated>2021-07-24T03:47:59.000Z</updated>
        <content type="html"><![CDATA[<p>写过 <code>React</code> 的一定会有遇到过这个错误：</p>
<figure data-type="image" tabindex="1"><img src="https://z3.ax1x.com/2021/07/31/Wjf7Hs.png" alt="错误信息" loading="lazy"></figure>
<p>准确来说这是一个警告，因为它看起来并不会影响程序的正常运行，如果不去处理的话也不会有什么严重的后果，所以大多数人就会选择视而不见... 😂</p>
<p>但是要真问题来为啥会这样，不仔细研究一下不是很好想明白，下面就来探讨下这个错误提示的根本原因在哪。</p>
<p>首先看一下错误的字面意思：</p>
<p>不能更新 React 的 state 在一个还没有挂载的组件上。</p>
<p>这是一个空操作，但它表明您的应用程序中存在内存泄漏。</p>
<p>要修复，请取消 useEffect 清理函数中的所有订阅和异步任务。</p>
<p>意思大概是说问题出在了 <code>useEffect</code> 上，首先我们先尝试着复现一下这个错误。</p>
<p>我们构建一个简单的应用，通过一个 select 组件选择不同的动物名称，然后根据选择的名字读取相应的数据并显示在下方。</p>
<p>Pets 组件：</p>
<pre><code class="language-js">const Pets: React.FC = () =&gt; {
  const [pets, setPets] = useState('');
  const [petsData, setPetsData] = useState({});
  const [loading, setLoading] = useState(false);

  const handleChange = ({ target }) =&gt; {
    setLoading(true);
    setPets(target.value);
  };

  useEffect(() =&gt; {
    if (pets) {
      getPets(pets).then(res =&gt; {
        setLoading(false);
        setPetsData(res);
      });
    }
  }, [pets]);

  return (
    &lt;div&gt;
      &lt;select name=&quot;pets&quot; id=&quot;pets&quot; onChange={handleChange}&gt;
        &lt;option value=&quot;&quot;&gt;Select a pet&lt;/option&gt;
        &lt;option value=&quot;cats&quot;&gt;Cats&lt;/option&gt;
        &lt;option value=&quot;dogs&quot;&gt;Dogs&lt;/option&gt;
      &lt;/select&gt;
      {loading &amp;&amp; &lt;Loading /&gt;}
      {petsData &amp;&amp; &lt;PetsCard petsData={petsData} /&gt;}
    &lt;/div&gt;
  );
};
</code></pre>
<p>我们使用了 select 组件选择 <code>cats</code> 或是 <code>dogs</code>，当选择改变的时候我们设置当前的 <code>pets</code> 状态为选择的值，然后会触发 useEffect 更新对应的内容并显示。</p>
<p>其中 <code>PetsCard</code> 组件接受动物的数据并渲染：</p>
<pre><code class="language-js">const PetsCard = ({ petsData }) =&gt; {
  console.log(petsData);
  return (
    &lt;div&gt;
      &lt;p&gt;{petsData.name}&lt;/p&gt;
      &lt;p&gt;{petsData.avatar}&lt;/p&gt;
    &lt;/div&gt;
  );
};
</code></pre>
<p>使用 <code>Loading</code> 组件展示加载中的状态:</p>
<pre><code class="language-js">const Loading: React.FC = () =&gt; {
  return &lt;p&gt;Loading...&lt;/p&gt;;
};
</code></pre>
<p>数据部分我们选择本地模拟：</p>
<pre><code class="language-js">const petsData = {
  dogs: {
    name: 'dogs',
    avatar: '🐶'
  },
  cats: {
    name: 'cats',
    avatar: '🐱'
  }
};

export const getPets = (type: 'dogs' | 'cats') =&gt; {
  return new Promise((resolve, reject) =&gt; {
    setTimeout(() =&gt; {
      resolve(petsData[type]);
    }, 1000);
  });
};
</code></pre>
<p>使用 <code>setTimeout</code> 模拟较慢的网络请求。</p>
<p>最后将他们挂载起来：</p>
<pre><code class="language-js">const App: React.FC = () =&gt; {
  return (
    &lt;div&gt;
      &lt;Pets /&gt;
    &lt;/div&gt;
  );
};

render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>
<p>运行起来后一切正常，我们选择不同的名字展示相应的数据。</p>
<p>重点来了，我们添加一个按钮控制这个组件的显示与隐藏，修改后：</p>
<pre><code class="language-js">const App: React.FC = () =&gt; {
  const [show, setShow] = useState(true);
  return (
    &lt;div&gt;
      &lt;button onClick={() =&gt; setShow(!show)}&gt;switch&lt;/button&gt;
      {show &amp;&amp; &lt;Pets /&gt;}
    &lt;/div&gt;
  );
};

render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>
<p>下面执行操作：<strong>更换一个名字，在 Loading 状态的时候点击按钮，组件消失，console 弹出警告</strong></p>
<p>至此我们已经复现出了这个问题。</p>
<p>经过模拟我们发现了大概的问题所在，当我们更换名字的时候，组件开始请求对应的数据，然后我们点击了按钮，这个组件被卸载掉了，但是一秒后数据请求到了并 <code>setState</code> 更新数据，此时组件确实处于没有挂载的状态。</p>
<p>按照这个思路，要修复这个问题，只需要在这个组件被卸载的时候，取消掉所有的可能在未来更改状态的操作，而在 <code>useEffect</code> 这个 hooks 中，允许我们 return 一个函数，在这个函数中我们可以放入一些清理的逻辑，React 会在组件被卸载的时候执行这个函数，而在当前应用中我们只需要保证 <strong>组件卸载后不会再有 setState</strong></p>
<p>我们按照这个思路修改下 Pets 组件：</p>
<p>修改一下 useEffect 方法：</p>
<pre><code class="language-js">useEffect(() =&gt; {
    let mount = true;
    if (pets) {
      getPets(pets).then(res =&gt; {
        if (mount) {
          setLoading(false);
          setPetsData(res);
        }
      });
    }
    return () =&gt; {
      console.log('hahahhaha');
      mount = false;
    };
  }, [pets]);
</code></pre>
<p>定一个一个 <code>mount</code> 变量控制组件是否被挂载，并有条件的进行更新状态。</p>
<p>这下那个警告就消失了😁。</p>
<p>总结，在 <code>useEffect</code> 中订阅某些状态或者执行某些异步任务，一定要注意是否需要在组件被卸载的时候清除这些操作。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React useCallback]]></title>
        <id>https://baoyuantop.github.io/post/react-usecallback/</id>
        <link href="https://baoyuantop.github.io/post/react-usecallback/">
        </link>
        <updated>2021-07-22T08:58:41.000Z</updated>
        <content type="html"><![CDATA[<p>useCallback 接受一个函数并返回它的 <code>memoized</code> 版本，也就是缓存该函数。</p>
<p>在 React 的函数式组件中，每次 UI 变化该函数就会重新执行。所以在函数式组件内部定义的函数是不会重复利用的，而是每次都会创建一个新的。创建一个新的函数后，在使用这个函数的组件也会接受一个新的函数，相当于接受的 <code>props</code> 更新了， 所以就需要重新渲染。</p>
<p>例如：</p>
<pre><code class="language-js">const AddButton = () =&gt; {
    const [count, setCount] = useState(0);
    const handleClick = () =&gt; setCount(count + 1);
    return &lt;button onClick={handleClick}&gt;{count}&lt;/button&gt;
}
</code></pre>
<p>在 button 的 props 中我们传入了 <code>handlkeClick</code>，每次 UI 变化时 AddButton 这个组件就会重新执行一遍，然后重新创建一个 handleClick 函数，button 接受了新的 handleClick 函数就会重新渲染。</p>
<p>因此我们需要仅在 <code>count</code> 发生变化的时候才返回新的 handleClick 函数。这就是 <code>useCallback</code> 的作用。</p>
<p>useCallback 的函数签名如下：</p>
<pre><code class="language-js">useCallback(fn, deps)
</code></pre>
<p>fn 为我们定义的函数，deps 为依赖项数组，只有当这个数组中的变量变化了，fn 才会返回新的函数。依赖项数组类似于 <code>useEffect</code>。</p>
<p>useCallback 其实并没有避免重复创建函数，因为在 useCallback(fn, [deps]) 的形式中，每次运行都会创建一个函数。useCallback 只是可以决定是不是要使用新的函数。在 依赖项不变的时候，就始终返回之前的，从而避免组件的重复渲染。</p>
<p>如果你确定组件重复渲染问题不大，那么 useCallback 用不用就问题不大。不过最佳实践是使用它处理内部定义的函数。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rust 函数]]></title>
        <id>https://baoyuantop.github.io/post/rust-han-shu/</id>
        <link href="https://baoyuantop.github.io/post/rust-han-shu/">
        </link>
        <updated>2021-07-21T14:05:22.000Z</updated>
        <content type="html"><![CDATA[<p>定义一个两数相加的函数:</p>
<pre><code class="language-rust">fn add(a: u8, b: u8) {
    let sum = a + b;
    println!(&quot;sum is {}&quot;, sum)
}
</code></pre>
<p>如果你没有为变量声明类型，它们将设置为你第一次使用的函数的参数类型。</p>
<p>默认情况下整数的推断类型为 <code>i32</code>。</p>
<pre><code class="language-rust">let y = 12;
let z = 34;

add(y, z);
</code></pre>
<p>因为使用了 add 函数，y 和 z 将被推断为 <code>u8</code> 类型。如果再将 y 或者 z 传入其他类型参数的函数中会触发程序 panic。</p>
<pre><code class="language-rust">fn guess_number(number: i32) {
    println!(&quot;Indeed, {} is the correct answer&quot;, number)
}
</code></pre>
<pre><code class="language-rust">guess_number(z); // 需要 i32 而传入了 u8
</code></pre>
<p>需要显式类型转换:</p>
<pre><code class="language-rust">guess_number(y as i32);
</code></pre>
<h2 id="函数返回类型">函数返回类型</h2>
<pre><code class="language-rust">// 接受一个 i32 类型的参数，返回一个 i32 类型的值
fn square(number: i32) -&gt; i32 {
    number * number
    // 返回值的表达式
    // 等效于 return number * number
}
</code></pre>
<p>使用元组返回多个值：</p>
<pre><code class="language-rust">fn triple(number: i32) -&gt; (i32, i32) {
    let input = number;
    let result = number * 3;
    (input, result)
}
</code></pre>
<p>没有返回值，指定返回值为 () 是可选的。</p>
<pre><code class="language-rust">fn does_not_return() -&gt; () {
    println!(&quot;ain't returning nuthing!&quot;)
}
</code></pre>
<h2 id="闭包">闭包</h2>
<p>闭包大多是可以访问封闭环境中的变量的匿名函数。</p>
<pre><code class="language-rust">let double = |n1: u8| -&gt; u8 { n1 * 2 };
println!(&quot;{}&quot;, double(11)); // 22
</code></pre>
<pre><code class="language-rust">let triple = |n1| n1 * 3;
println!(&quot;{}&quot;, triple(99)); // 297
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[元组类型]]></title>
        <id>https://baoyuantop.github.io/post/yuan-zu-lei-xing/</id>
        <link href="https://baoyuantop.github.io/post/yuan-zu-lei-xing/">
        </link>
        <updated>2021-07-21T06:18:52.000Z</updated>
        <content type="html"><![CDATA[<p>Tuples (元组) 类型 用于混合数据类型，最多可以有 12 种混合类型。</p>
<p>定义元组并取值:</p>
<pre><code class="language-rust">let a_tuple: (&amp;str, u8, char) = (&quot;ok&quot;, 0, 'd');
let first_item = a_tuple.0;
println!(&quot;first_item is {}&quot;, first_item); // &quot;ok&quot;
</code></pre>
<p>修改元组的值：</p>
<pre><code class="language-rust">let mut b_tuples = (&quot;ok&quot;, 0);
b_tuples.0 = &quot;ko&quot;;
b_tuples.1 += 1;
println!(&quot;b_tuples.0 is {}, b_tuples.1 is {}&quot;, b_tuples.0, b_tuples.1);
</code></pre>
<p>元组的解构赋值:</p>
<pre><code class="language-rust">let c_tuple = (&quot;zh&quot;, &quot;CN&quot;, 1);
let (language, country, code) = c_tuple;
println!(
    &quot;language is: {}, country is: {}, code is: {}&quot;,
    language, country, code
); // language is: en, country is: US, code is: 1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React 函数式组件的返回值]]></title>
        <id>https://baoyuantop.github.io/post/component-retrun/</id>
        <link href="https://baoyuantop.github.io/post/component-retrun/">
        </link>
        <updated>2021-07-20T08:12:25.000Z</updated>
        <content type="html"><![CDATA[<p>函数式组件是一个普通函数，接受参数并返回一个 React 元素。</p>
<p>一些特殊的返回值：</p>
<ul>
<li>没有任何返回会直接导致错误，这包括显式的返回 <code>undefined</code>，两者等价</li>
</ul>
<pre><code class="language-js">import React from 'react';
import { render } from 'react-dom';

const App = () =&gt; {
  return; // 等价于 return undefined;
};

render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z3.ax1x.com/2021/07/22/WBiHRP.png" alt="错误信息" loading="lazy"></figure>
<p>错误提示我们没有返回任何内容供 render。</p>
<ul>
<li>如果返回了 <code>null</code> 则是可以正常渲染空白页面的:</li>
</ul>
<pre><code class="language-js">import React from 'react';
import { render } from 'react-dom';

const App = () =&gt; {
  return null;
};

render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>
<p>除此之外还有以下类型:</p>
<ul>
<li>
<p>空字符串、空数组、false、返回空白页面，不渲染任何内容。</p>
</li>
<li>
<p>1 或者 0 直接渲染 1 或 0;</p>
</li>
<li>
<p>空对象出错</p>
</li>
</ul>
<p>问题的原因在于 <code>render(&lt;App /&gt;, document.getElementById('root'));</code>，也就是 react-dom 的 <code>render</code> 方法，它接受的第一个参数为 <code>React 元素类型</code>。</p>
<p>源码中的定义为</p>
<pre><code class="language-js">function render(
  element: React$Element&lt;any&gt;,
  container: Container,
  callback: ?Function,
) {};
</code></pre>
<p>可以看到 element 的类型为 <code>React$Element&lt;any&gt;</code>，接收的为一个 React 组件。</p>
<p>tips😂: 这样做会有特殊的效果:</p>
<pre><code class="language-js">import React from 'react';
import { render } from 'react-dom';

const App = () =&gt; {
  return &lt;App /&gt;;
};

render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vectors 类型]]></title>
        <id>https://baoyuantop.github.io/post/vectors-lei-xing/</id>
        <link href="https://baoyuantop.github.io/post/vectors-lei-xing/">
        </link>
        <updated>2021-07-19T13:30:08.000Z</updated>
        <content type="html"><![CDATA[<p>vector 是一个具有相同类型的数据集合，元素按顺序排列。</p>
<p>数组 具有固定的大小，必须在编译时确定大小，因为数组存储在栈上。</p>
<p>vector 可以动态的调整大小，通过 <code>adding</code> 或 <code>removing</code> 元素。相当于动态长度的数组。</p>
<p>vector 数据存储在堆内存中，因此你需要自己处理 <code>所有权</code> 和 <code>借用</code>。</p>
<pre><code class="language-rust">let mut letters: Vec&lt;char&gt; = vec!['a', 'b', 'c'];
println!(&quot;letters are {:?}&quot;, letters); // letters are ['a', 'b', 'c']

let first_letter = letters[0];
println!(&quot;first_letter is {}&quot;, first_letter); // first_letter is a
</code></pre>
<p>向 vector 中添加数据:</p>
<pre><code class="language-rust">letters.push('d');
letters.push('e');
letters.push('f');
println!(&quot;letters are {:?}&quot;, letters); // letters are ['a', 'b', 'c', 'd', 'e', 'f']
</code></pre>
<p>删除最后一个元素:</p>
<pre><code class="language-rust">letters.pop();
println!(&quot;letters are {:?}&quot;, letters); // letters are ['a', 'b', 'c', 'd', 'e']
</code></pre>
<p>可变的 vector：</p>
<pre><code class="language-rust">let mut numbers: Vec&lt;i32&gt; = vec![11, 22, 44];
numbers[2] = 33;
println!(&quot;numbers is {}&quot;, numbers[2]); // numbers is 33
</code></pre>
<p>获取长度:</p>
<pre><code class="language-rust">let mut ints = vec![22, 33, 44, 55, 66, 77];
let length: usize = ints.len();
println!(&quot;length is {}&quot;, length); // length is 6
</code></pre>
<p>vector 切片:</p>
<pre><code class="language-rust">let mut slice: &amp;[i32] = &amp;ints;
println!(&quot;slice is {:?}&quot;, slice); // slice is [22, 33, 44, 55, 66, 77]
slice = &amp;ints[2..5];
println!(&quot;slice is {:?}&quot;, slice); // slice is [44, 55, 66]
</code></pre>
<p>基于 vector 的迭代:</p>
<pre><code class="language-rust">for it in ints.iter() {
    println!(&quot;it is {}&quot;, it);
}

// it is 22
// it is 33
// it is 44
// it is 55
// it is 66
// it is 77
</code></pre>
<p>在迭代中修改值:</p>
<pre><code class="language-rust">for it in ints.iter_mut() {
    // 使用取消引用指针 (*it) 以获取和修改值
    *it *= *it;
}
println!(&quot;ints is {:?}&quot;, ints); // ints is [484, 1089, 1936, 3025, 4356, 5929]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[切片类型(slices)]]></title>
        <id>https://baoyuantop.github.io/post/qie-pian-lei-xing-slices/</id>
        <link href="https://baoyuantop.github.io/post/qie-pian-lei-xing-slices/">
        </link>
        <updated>2021-07-13T02:31:08.000Z</updated>
        <summary type="html"><![CDATA[<p><code>切片 (slice)</code> 用于引用一个集合（比如数组、字符串）的一段连续部分（子集）而不需要拥有这些元素的所有权。</p>
]]></summary>
        <content type="html"><![CDATA[<p><code>切片 (slice)</code> 用于引用一个集合（比如数组、字符串）的一段连续部分（子集）而不需要拥有这些元素的所有权。</p>
<!-- more -->
<p>比较常见的用法有 字符串切片类型 <code>&amp;str</code>。</p>
<p>字符串字面量是 <code>slice</code> 类型，数据被硬编码在可执行二进制文件中，程序使用字符串切片来访问它。</p>
<p>字符串类型的变量有一个字符串数据在内存中起始位置的指针，表示有关字符串长度和容量的信息。</p>
<pre><code class="language-rust">let sentence = String::from(&quot;This is a sequence of words.&quot;);
println!(&quot;sentence is {}&quot;, sentence); // sentence is This is a sequence of words.
</code></pre>
<pre><code class="language-rust">let last_word = &amp;sentence[22..22 + 5];
println!(&quot;last_word is \&quot;{}\&quot;&quot;, last_word); // last_word is &quot;words&quot;
</code></pre>
<p><code>last_word</code> 变量有一个指向字符串数据部分的  偏移/起始 索引的指针以及切片长度。<br>
通常切片的结束索引不包含在结果中。（不包含第 5 位）</p>
<p>从起始位置到末尾的切片：</p>
<pre><code class="language-rust">let last_part: &amp;str = &amp;sentence[22..];
println!(&quot;last_part is \&quot;{}\&quot;&quot;, last_part); // last_part is &quot;words.&quot;
</code></pre>
<p>字符串切片的长度以字节数为单位，使用  <code>usize</code> 类型。<strong>不是字符串中字符的数量</strong></p>
<pre><code class="language-rust">let slice_length: usize = last_part.len();
println!(&quot;slice_length is {} bytes&quot;, slice_length); // slice_length is 6 bytes
</code></pre>
<p>当使用字符串切片索引取值的时候应特别注意，<code>UTF-8</code> 编码会占用 1 到 4 字节，而不是固定的字节。索引值必须在字符的边界处，否则程序会 <code>panic</code> 。所以在创建字符串的时候谨慎使用特殊字符或是表情。</p>
<p>在 <code>Node.js</code> 中我们是不太会关注这些底层问题。</p>
<h2 id="slices-类型作为参数">Slices 类型作为参数</h2>
<p>我们创建一个函数用来获取一句话的第一个词语：</p>
<pre><code class="language-rust">fn get_first_word(msg: &amp;String) -&gt; &amp;str {
    // 从字符串语句中创建一个字节类型的 slice （&amp;[u8]）
    let bytes: &amp;[u8] = msg.as_bytes();

    // 遍历这个 bytes ，并使用 enumerate() 获取每次的索引值
    for (index, &amp;item) in bytes.iter().enumerate() {
        // 找到第一个空格，并将之前的所有内容作为 string slice 返回
        // 一个空格的字节表示为 b' '
        // 我们正在迭代的是 字节 而不是 字符串
        // 这样做是因为 索引值 是因为字符串切片的索引是以 字节 为单位的

        if item == b' ' {
            return &amp;msg[..index];
       }
    }
    // 如果没有找到空格则返回全部
    &amp;msg
}
</code></pre>
<pre><code class="language-rust">let message = String::from(&quot;lorem ipsum&quot;);

let first_word = get_first_word(&amp;message);
println!(&quot;first_word is \&quot;{}\&quot;&quot;, first_word); // first_word is &quot;lorem&quot;

let first_word_too = get_first_word_too(&amp;message[6..]);
println!(&quot;first_word_too is \&quot;{}\&quot;&quot;, first_word_too); // first_word_too is &quot;ipsum&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rust 中的数组]]></title>
        <id>https://baoyuantop.github.io/post/rust-zhong-de-shu-zu/</id>
        <link href="https://baoyuantop.github.io/post/rust-zhong-de-shu-zu/">
        </link>
        <updated>2021-07-12T09:44:22.000Z</updated>
        <content type="html"><![CDATA[<p>Rust 中的数组长度是固定的，数组中的每个元素类型是一致的。</p>
<p>数组存储在内存中一段连续的空间内，<code>连续</code> 意味着相邻元素之间的距离一致。</p>
<pre><code class="language-rust">let letters = ['a', 'b', 'c']; // letters 的类型为 [char; 3]
let first_letter = letters[0];
println!(&quot;first_letter is {}&quot;, first_letter); // first_letter is a
</code></pre>
<p>如果要修改数组中的某个元素，则数组创建时应声明为 <code>可变的(mut)</code>。</p>
<pre><code class="language-rust">let mut numbers = [11, 22, 44]; // 类型为 [i32; 3]
numbers[2] = 33;
println!(&quot;numbers is {}&quot;, numbers[2]); // numbers is 33
</code></pre>
<p>声明一个空数组时，应标识类型（元素类型、长度）:</p>
<pre><code class="language-rust">let words: [&amp;str; 2]; // 标识数组长度为 2 ，元素类型为 &amp;str
words = [&quot;ok&quot;; 2]; // 重复表达式，等效于 [&quot;ok&quot;, &quot;ok&quot;]
println!(&quot;words is {:?}&quot;, words); // words is [&quot;ok&quot;, &quot;ok&quot;]
</code></pre>
<p><code>usize</code> 长度基于在目标机器 CPU 的位数：</p>
<ul>
<li>32 位机器为 4 位</li>
<li>64 位机器位 8 位</li>
</ul>
<pre><code class="language-rust">let ints = [22; 5];
let length: usize = ints.len();
println!(&quot;length is {}&quot;, length); // length is 5
</code></pre>
<p>使用 std crate 的 <code>men</code> 模块查看内存占用大小</p>
<pre><code class="language-rust">let mem_size_byte = std::mem::size_of_val(&amp;ints);
println!(&quot;mem_size_byte is {}&quot;, mem_size_byte); // mem_size_byte is 20
</code></pre>
<p>获取数组切片</p>
<pre><code class="language-rust">let mut slice: &amp;[i32] = &amp;ints;
println!(&quot;slice is {:?}&quot;, slice); // slice is [22, 22, 22, 22, 22]

slice = &amp;ints[3..5];
println!(&quot;slice is {:?}&quot;, slice); // slice is [22, 22]
</code></pre>
<h2 id="多阶数组">多阶数组</h2>
<pre><code class="language-rust">let d2: [[i32; 3]; 3] = [[9, 8, 7], [6, 5, 4], [3, 2, 1]];
let value = d2[1][0];
println!(&quot;value is {}&quot;, value); // value is 6

let d3: [[[&amp;str; 100]; 20]; 5];
d3 = [[[&quot;ok&quot;; 100]; 20]; 5];
println!(&quot;value d3[3][11][35] is {}&quot;, d3[3][11][35]) // value d3[3][11][35] is ok
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算数运算与比较运算]]></title>
        <id>https://baoyuantop.github.io/post/suan-shu-yun-suan-yu-bi-jiao-yun-suan/</id>
        <link href="https://baoyuantop.github.io/post/suan-shu-yun-suan-yu-bi-jiao-yun-suan/">
        </link>
        <updated>2021-07-12T02:59:50.000Z</updated>
        <content type="html"><![CDATA[<p>在 Rust 中只能对相同类型的操作数做算数运算。</p>
<p>基本运算:</p>
<pre><code class="language-rust">let a = 11;
let b = 33;
let c = a + b;
println!(&quot;c is {}&quot;, c); // c is 44
let d = c - b;
println!(&quot;d is {}&quot;, d); // d is 11
let e = a * d;
println!(&quot;e is {}&quot;, e); // e is 121
</code></pre>
<p>使用 <code>as</code> 进行类型转换，需要注意精度损失和兼容性问题。</p>
<pre><code class="language-rust">let f = c as f32 / 4.5;
println!(&quot;f is {}&quot;, f); // f is 9.777778
</code></pre>
<p>优先级控制</p>
<pre><code class="language-rust">let g = 43.5432 % (a as f64 * e as f64);
println!(&quot;g is {}&quot;, g); // g is 43.5432
</code></pre>
<p>同样的做比较运算只能对相同类型的进行比较</p>
<pre><code class="language-rust">let a = 11;
let b = 88;
</code></pre>
<pre><code class="language-rust">println!(&quot;a EQUAL TO b is {}&quot;, a == b); // a EQUAL TO b is false

println!(&quot;a NOT EQUAL TO b is {}&quot;, a != b); // a NOT EQUAL TO b is true

println!(&quot;a GREATER THAN b is {}&quot;, a &gt; b); // a GREATER THAN b is false

println!(&quot;a GREATER THAN OR EQUAL TO b is {}&quot;, a &gt;= b); // a GREATER THAN OR EQUAL TO b is false

println!(&quot;a LESS THAN b is {}&quot;, a &lt; b); // a LESS THAN b is true

println!(&quot;a LESS THAN OR EQUAL TO b is {}&quot;, a &lt;= b); // a LESS THAN OR EQUAL TO b is true
</code></pre>
<pre><code class="language-rust">let c = true;
let d = false;

println!(&quot;c GREATER THAN d is {}&quot;, c &gt; d); // c GREATER THAN d is true
println!(&quot;c GREATER THAN OR EQUAL TO d is {}&quot;, c &gt;= d); // c GREATER THAN OR EQUAL TO d is true
</code></pre>
<p><strong>示例：计算平均值</strong></p>
<pre><code class="language-rust">fn main() {
    let a = 33;
    let b = 4.9;
    let c: f32 = 123.5;
    let average = (a as f32 + b as f32 + c) / 3.0;
    println!(&quot;average is {}&quot;, average);
    assert_eq!(average, 53.8);
    println!(&quot;test passed.&quot;);
}
</code></pre>
<p>输出：</p>
<pre><code class="language-rust">average is 53.8
test passed.
</code></pre>
]]></content>
    </entry>
</feed>